name: Build and Deploy Code

on: [push, pull_request]

jobs: 
  build:
    environment:
      name: testing
    env: 
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHUM: ${{secrets.ALGORITHUM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    services:
      postgres:
        image: postgres
        env: 
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports: 
          - 5432:5432
        options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
    runs-on: ubuntu-latest
    steps: 
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: Install python 
        uses: actions/setup-python@v2
        with: 
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: | 
          pip install pytest
          pytest 

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with: 
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      - name: Set up Docker Buiildx
        id: buildx
        uses: docker/setup-buildx-actions@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/fastapi:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{steps.docker_build.outputs.digest}}
  
  deploy: 
    runs-on: ubuntu-latest
    needs: [build] 

    steps: 
      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.13 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "YOUR APP's NAME" #Must be unique in Heroku
          heroku_email: "YOUR EMAIL"

        - name: deploy to ubuntu server
          uses: appleboy/ssh-action@master
          with:
            host: ${{secrets.PROD_HOST}}
            username: ${{secrets.PROD_USERNAME}}
            password: ${{secrets.PROD_PASSWORD}}
            script: |
              cd app/src
              git pull
              echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api